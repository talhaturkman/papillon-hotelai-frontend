const express = require('express');
const router = express.Router();
const { v4: uuidv4 } = require('uuid');
const geminiService = require('../services/gemini');
const firebaseService = require('../services/firebase');
const knowledgeService = require('../services/knowledge');
const elevenLabsService = require('../services/elevenlabs');
const translationService = require('../services/translation');
const placesService = require('../services/places');
const questionAnalytics = require('../services/questionAnalytics');

// Fuzzy string matching (Levenshtein distance)
function levenshtein(a, b) {
  if (a.length === 0) return b.length;
  if (b.length === 0) return a.length;
  const matrix = [];
  for (let i = 0; i <= b.length; i++) matrix[i] = [i];
  for (let j = 0; j <= a.length; j++) matrix[0][j] = j;
  for (let i = 1; i <= b.length; i++) {
    for (let j = 1; j <= a.length; j++) {
      if (b.charAt(i - 1) === a.charAt(j - 1)) {
        matrix[i][j] = matrix[i - 1][j - 1];
      } else {
        matrix[i][j] = Math.min(
          matrix[i - 1][j - 1] + 1, // substitution
          matrix[i][j - 1] + 1,     // insertion
          matrix[i - 1][j] + 1      // deletion
        );
      }
    }
  }
  return matrix[b.length][a.length];
}

// Otel adƒ± kontrol√º fonksiyonu
function isHotelName(msg) {
  const hotels = ['belvil', 'zeugma', 'ayscha'];
  return hotels.includes(msg.trim().toLowerCase());
}

// √ñrnek restoran bilgisi fonksiyonu
async function getHotelRestaurants(hotel) {
  const data = {
    belvil: 'Ana Restoran, ƒ∞talyan, Balƒ±k',
    zeugma: 'Ana Restoran, T√ºrk, Uzakdoƒüu',
    ayscha: 'Ana Restoran, Fransƒ±z, Meksika'
  };
  return data[hotel.toLowerCase()] || 'Bilgi yok';
}

// Restoran/alan ismi ‚Üí otel e≈üle≈ütirme haritasƒ± (g√ºncel ve tam)
const restaurantToHotel = {
  // Zeugma
  'mosaic': 'zeugma',
  'papy √ßocuk restoranƒ±': 'zeugma',
  'asma': 'zeugma',
  'food court': ['zeugma', 'belvil', 'ayscha'],
  'macrina': 'zeugma',
  'pa&co': ['zeugma', 'ayscha'],
  'beer house': 'zeugma',
  'farfalle': 'zeugma',
  'the gourmet street': 'zeugma',
  'haru': 'zeugma',
  "mey'hane": 'zeugma',
  'meyhane (t√ºrk)': 'zeugma',
  // Belvil
  'belle vue': 'belvil',
  'bloom lounge': 'belvil',
  'blue bar': 'belvil',
  'kanji': 'belvil',
  'dolce vita': 'belvil',
  'mirage pastane': 'belvil',
  'bloom (steak & wine)': 'belvil',
  'bloom (akdeniz)': 'belvil',
  'mirage (italyan)': 'belvil',
  // Ayscha
  'ayscha ana restoran': 'ayscha',
  'martini bar': 'ayscha',
  'beach snack': 'ayscha',
  'cafe harmony': 'ayscha',
  'taco': 'ayscha',
  'villa snack restoran': 'ayscha',
  'surf & turf': 'ayscha',
  'safran': 'ayscha',
  'mikado': 'ayscha',
  'coral': 'ayscha',
  'viccolo': 'ayscha'
};

function normalizeText(text) {
  return text.toLowerCase().replace(/[^a-zA-Z0-9ƒü√º≈ü√∂√ßƒ±ƒ∞ƒû√ú≈û√ñ√á\s]/g, '').trim();
}

router.post('/tts', async (req, res) => {
        const { text, language = 'tr', gender = 'female' } = req.body;
        
        if (!text) {
        return res.status(400).json({ error: 'Text is required for TTS' });
    }

    try {
        const audioBuffer = await elevenLabsService.generateSpeech(text, language, gender);
        
        // Set headers for audio playback
        res.setHeader('Content-Type', 'audio/mpeg');
        res.setHeader('Content-Length', audioBuffer.length);
        
        // Send the audio buffer
        res.send(audioBuffer);

    } catch (error) {
        console.error('‚ùå TTS Route Error:', error.message);
        res.status(500).json({ error: 'Failed to generate speech' });
    }
});

router.post('/', async (req, res) => {
    try {
        let { message, history = [], session_id, userLocation } = req.body;

        if (!session_id) {
            session_id = uuidv4();
            console.log(`‚ú® New session started: ${session_id}`);
        }

        if (!message) {
            return res.status(400).json({ error: 'Message is required' });
        }

        // 0. Her mesajda session context'i kontrol et (√ñNCE BUNU YAP!)
        const sessionContext = await firebaseService.getSessionContext(session_id);
        if (sessionContext.pending === 'hotel' && isHotelName(message)) {
            console.log('[DEBUG] sessionContext (otel adƒ± bekleniyor):', sessionContext);
            if (sessionContext.lastMessage) {
                // 1. Otel ve dil ile ilgili bilgi metnini √ßek
                const knowledge = await firebaseService.searchKnowledge(message, 'tr');
                // 2. Sohbet ge√ßmi≈üine yeni otel adƒ±nƒ± ekle
                const updatedHistory = [...history, { role: 'user', content: message }];
                // 3. Birle≈ütirilmi≈ü soruyu da history'ye ekle (kronolojik b√ºt√ºnl√ºk i√ßin)
                const fullQuestion = `${message} otelinde ${sessionContext.lastMessage}`;
                updatedHistory.push({ role: 'user', content: fullQuestion });
                console.log('[DEBUG] Birle≈ütirilmi≈ü soru Gemini\'ye g√∂nderiliyor (t√ºm history ile):', fullQuestion);
                const aiResponse = await geminiService.generateResponse(
                    updatedHistory,
                    knowledge?.content || '', // context
                    'tr'
                );
                await firebaseService.setSessionContext(session_id, { pending: null, lastIntent: null });
                return res.json({
                    success: true,
                    response: aiResponse.response,
                    hotel: message
                });
            }
            // Diƒüer intentler i√ßin de benzer ≈üekilde ekleyebilirsiniz
        }

        // 1. Restoran/alan ismine g√∂re otel tahmini (normalize ile)
        let detectedHotelByRestaurant = null;
        let detectedRestaurant = null;
        const lowerMsg = normalizeText(message);
        let matchedHotels = [];
        for (const [restName, hotelName] of Object.entries(restaurantToHotel)) {
          if (lowerMsg.includes(normalizeText(restName))) {
            detectedRestaurant = restName;
            if (Array.isArray(hotelName)) {
              matchedHotels.push(...hotelName);
            } else {
              matchedHotels.push(hotelName);
            }
          }
        }
        matchedHotels = [...new Set(matchedHotels)]; // Tekille≈ütir
        if (matchedHotels.length === 1) {
          detectedHotelByRestaurant = matchedHotels[0];
        } else if (matchedHotels.length > 1) {
          // Birden fazla otel e≈üle≈üirse kullanƒ±cƒ±ya sor
          detectedHotelByRestaurant = null;
        }
        // 2. Otel tespiti: √∂nce restoran haritasƒ±, sonra AI
        let hotel = detectedHotelByRestaurant;
        if (!hotel) {
          hotel = await geminiService.detectHotelWithAI(message, history);
        }
        let detectedLanguage = await geminiService.detectLanguage(message, history);
        if (!hotel) hotel = 'Unknown';
        if (!detectedLanguage) detectedLanguage = 'tr';
        
        // Add user's message to history for this turn
        const chatHistory = [...history, { role: 'user', content: message }];

        // Soru mu? Selamla≈üma/te≈üekk√ºr/veda ise Gemini'ye hi√ß g√∂nderme (√ñNCE BUNU YAP!)
        const isQuestion = await questionAnalytics.isQuestion(message, detectedLanguage);

        // --- CANLI DESTEK + OTEL ADI Bƒ∞RLƒ∞KTEYSE √ñNCELƒ∞KLƒ∞ AKI≈û ---
        const supportKeywords = [
            'canlƒ± destek', 'canlƒ± yardƒ±m', 'm√º≈üteri hizmetleri', 'live support', 'live help', 'customer service', 'real person', 'operator', 'agent', 'baƒülanmak istiyorum', 'yardƒ±m istiyorum', 'support', 'help', 'assistance', 'representative', 'talk to human', 'talk to operator', 'real agent', 'real person', '–∂–∏–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–º–æ—â—å', '—Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏'
        ];
        const otelAdlari = ['belvil', 'zeugma', 'ayscha'];
        // Otel adƒ± c√ºmlenin herhangi bir yerinde, farklƒ± varyasyonlarda ge√ßebilir
        const otelAdRegex = /(belvil|zeugma|ayscha)(\s|\W|$)/i;
        const supportMsgLower = message.toLowerCase();
        const hasSupportKeyword = supportKeywords.some(kw => supportMsgLower.includes(kw));
        // Fuzzy otel adƒ± e≈üle≈ümesi
        let fuzzyHotel = null;
        let minDistance = 3;
        for (const otel of otelAdlari) {
          const words = supportMsgLower.split(/\s|\W/).filter(Boolean);
          for (const word of words) {
            const dist = levenshtein(word, otel);
            if (dist < minDistance) {
              minDistance = dist;
              fuzzyHotel = otel;
            }
          }
        }
        if (!fuzzyHotel) {
          // Regex ile de deneriz
          const otelMatch = message.match(otelAdRegex);
          if (otelMatch) fuzzyHotel = otelMatch[1].toLowerCase();
        }
        // Otel adƒ± algƒ±landƒ±ysa
        if (fuzzyHotel) {
            const hotel = fuzzyHotel.charAt(0).toUpperCase() + fuzzyHotel.slice(1).toLowerCase();
            console.log('DEBUG: OTEL ADI ALGILANDI (fuzzy):', message, '‚Üí', hotel);
            
            // Eƒüer session context'te pending intent varsa, AI yanƒ±tƒ± √ºret
            if (sessionContext.pending === 'hotel' && sessionContext.lastIntent === 'restaurant_info') {
                console.log('üî• Session context detected - generating AI response for hotel selection');
                // 1. Otel ve dil ile ilgili bilgi metnini √ßek
                const knowledge = await firebaseService.searchKnowledge(hotel, detectedLanguage);
                // 2. Soru + bilgi metni ile Gemini'ye g√∂nder
                const fullQuestion = `${hotel} otelinde ${sessionContext.lastMessage}`;
                const aiResponse = await geminiService.generateResponse(
                    [{ role: 'user', content: fullQuestion }],
                    knowledge?.content || '', // context
                    detectedLanguage
                );
                await firebaseService.setSessionContext(session_id, { pending: null, lastIntent: null });
                return res.json({
                    success: true,
                    response: aiResponse.response,
                    hotel
                });
            }
            
            // Eƒüer mesajda hem otel adƒ± hem de soru varsa (tek seferde), yeni √ßok dilli arama zincirini kullan
            if (fuzzyHotel && isQuestion) {
                console.log('üî• Hotel + Question detected in single message - using multi-language knowledge search');
                
                // Restoran sorusu ise √∂zel filtreleme yap
                if (detectedRestaurant) {
                    console.log(`[Chat Route] Restaurant-specific question detected: ${detectedRestaurant}`);
                    // Restoran sorusu i√ßin eski y√∂ntemi kullan (√ß√ºnk√º √∂zel filtreleme gerekiyor)
                    const knowledge = await firebaseService.searchKnowledge(hotel, detectedLanguage);
                    if (knowledge && detectedRestaurant) {
                        const filteredChunks = Object.entries(knowledge.fbChunks || {})
                            .filter(([key]) => normalizeText(key).includes(normalizeText(detectedRestaurant)))
                            .map(([, chunks]) => chunks)
                            .flat();
                        if (filteredChunks.length > 0) {
                            knowledge.content = filteredChunks.map(chunk => chunk.text).join('\n');
                        }
                    }
                    const aiResponse = await geminiService.generateResponse(
                        chatHistory,
                        knowledge?.content || '',
                        detectedLanguage,
                        userLocation
                    );
                    return res.json({
                        success: true,
                        response: aiResponse.response,
                        hotel
                    });
                } else {
                    // Genel sorular i√ßin yeni √ßok dilli arama zincirini kullan
                    const knowledgeResult = await knowledgeService.findBestKnowledgeAnswer(message, hotel, detectedLanguage);
                    
                    if (knowledgeResult.success) {
                        console.log(`[Chat Route] ‚úÖ Found answer in ${knowledgeResult.sourceLanguage}: "${knowledgeResult.answer.substring(0, 50)}..."`);
                        return res.json({
                            success: true,
                            response: knowledgeResult.answer,
                            hotel
                        });
                    } else {
                        console.log(`[Chat Route] ‚ùå No answer found, using fallback LLM response`);
                        // Fallback: Eski y√∂ntemle LLM'ye g√∂nder
                        const knowledge = await firebaseService.searchKnowledge(hotel, detectedLanguage);
                        const aiResponse = await geminiService.generateResponse(
                            chatHistory,
                            knowledge?.content || '',
                            detectedLanguage,
                            userLocation
                        );
                        return res.json({
                            success: true,
                            response: aiResponse.response,
                            hotel
                        });
                    }
                }
            }
            
            // Eƒüer canlƒ± destek anahtar kelimesi de varsa
            if (hasSupportKeyword) {
                let responseText = detectedLanguage === 'tr' ? 'Canlƒ± desteƒüe baƒülanmak istiyor musunuz?'
                    : detectedLanguage === 'en' ? 'Do you want to connect to live support?'
                    : detectedLanguage === 'de' ? 'M√∂chten Sie mit dem Live-Support verbunden werden?'
                    : detectedLanguage === 'ru' ? '–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏?'
                    : 'Do you want to connect to live support?';
                return res.json({
                    success: true,
                    response: responseText,
                    hotel,
                    offerSupport: true,
                    needHotelSelection: false
                });
            } else {
                // Sadece otel adƒ± yazƒ±ldƒ±ysa, otel se√ßimi olarak kabul et
                let responseText = detectedLanguage === 'tr' ? 'Merhaba! ' + hotel + ' otelinde konaklƒ±yorsunuz. Size nasƒ±l yardƒ±mcƒ± olabilirim?'
                    : detectedLanguage === 'en' ? 'Hello! You are staying at ' + hotel + ' hotel. How can I help you?'
                    : detectedLanguage === 'de' ? 'Hallo! Sie wohnen im ' + hotel + ' Hotel. Wie kann ich Ihnen helfen?'
                    : detectedLanguage === 'ru' ? '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å –≤ –æ—Ç–µ–ª–µ ' + hotel + '. –ö–∞–∫ —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?'
                    : 'Hello! You are staying at ' + hotel + ' hotel. How can I help you?';
                return res.json({
                    success: true,
                    response: responseText,
                    hotel,
                    offerSupport: false,
                    needHotelSelection: false
                });
            }
        }

        // Soru mu? Selamla≈üma/te≈üekk√ºr/veda ise Gemini'ye hi√ß g√∂nderme
        if (!isQuestion) {
            let greetingReply = 'Merhaba!';
            if (detectedLanguage === 'en') greetingReply = 'Hello!';
            else if (detectedLanguage === 'de') greetingReply = 'Hallo!';
            else if (detectedLanguage === 'ru') greetingReply = '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!';
            return res.json({
                success: true,
                response: greetingReply,
                isQuestion: false
            });
        }

        // isQuestion kontrol√ºnden hemen sonra locationAnalysis'ƒ± tanƒ±mla
        let locationAnalysis = await geminiService.analyzeLocationQuery(message, history, detectedLanguage);

        // Eƒüer otel adƒ± eksikse ve restoran/amenity soruluyorsa, context'e pending yaz
        // (√∂rnek: restoran sorusu, otel adƒ± yok)
        if ((message.toLowerCase().includes('restoran') || message.toLowerCase().includes('restaurant')) && (!hotel || hotel === 'Unknown')) {
            await firebaseService.setSessionContext(session_id, {
                pending: 'hotel',
                lastIntent: 'restaurant_info',
                lastMessage: message
            });
            return res.json({
                success: true,
                response: 'Hangi Papillon Hotels otelinde konaklƒ±yorsunuz? Belvil, Zeugma ve Ayscha otellerimizden hangisinde olduƒüunuzu belirtirseniz, restoranlar hakkƒ±nda bilgi verebilirim.',
                needHotelSelection: true
            });
        }

        // Log the question for analytics
        const questionId = await firebaseService.logQuestionForAnalysis({
            message,
            session_id,
            hotel,
            language: detectedLanguage,
            userLocation: userLocation ? {
                lat: userLocation.lat,
                lng: userLocation.lng
            } : null
        });

        // 2. REAL-TIME QUESTION ANALYSIS - Anƒ±nda soru analizi
        if (questionId) {
            try {
                console.log(`üîç Starting real-time analysis for question: ${questionId}`);
                
                        // ƒ∞lk isQuestion kontrol√ºn√º kullan (√ßifte kontrol yok)
                console.log(`‚ùì Is question "${message}": ${isQuestion}`);
                
                if (isQuestion) {
            // Anƒ±nda kategorizasyon + embedding (optimized)
            const categorizationWithEmbedding = await questionAnalytics.categorizeQuestionWithEmbedding(message);
            console.log(`üìä Categorization + Embedding for "${message}":`, {
                category: categorizationWithEmbedding.category,
                facility: categorizationWithEmbedding.facility,
                hasEmbedding: !!categorizationWithEmbedding.embedding
            });
            
            // Firebase'i g√ºncelle (hem kategorizasyon hem embedding)
                    await firebaseService.updateQuestionAnalytics(questionId, {
                        isQuestion: true,
                categorization: {
                    category: categorizationWithEmbedding.category,
                    facility: categorizationWithEmbedding.facility,
                    intent: categorizationWithEmbedding.intent
                },
                        preprocessed: true,
                category: categorizationWithEmbedding.category,
                facility: categorizationWithEmbedding.facility,
                embedding: categorizationWithEmbedding.embedding,
                semantic_keywords: categorizationWithEmbedding.semantic_keywords,
                        analyzedAt: new Date().toISOString()
                    });
                    
                    console.log(`‚úÖ Question ${questionId} analyzed and categorized in real-time`);
                    
                    // Sadece incremental cache g√ºncelle
                    questionAnalytics.updateTopQuestionsCache({
                        message,
                        text: message,
                        hotel,
                        language: detectedLanguage,
                category: categorizationWithEmbedding.category,
                facility: categorizationWithEmbedding.facility,
                        isQuestion: true
                    });
                } else {
                    // Soru deƒüilse i≈üaretle
                    await firebaseService.updateQuestionAnalytics(questionId, {
                        isQuestion: false,
                        preprocessed: true,
                        analyzedAt: new Date().toISOString()
                    });
                    
                    console.log(`‚ùå Question ${questionId} marked as non-question`);
                }
            } catch (analysisError) {
                console.error('‚ùå Real-time analysis failed:', analysisError);
                // Analiz ba≈üarƒ±sƒ±z olsa bile devam et
            }
        }

        // --- LLM tabanlƒ± analiz ---
        const llmAnalysis = await geminiService.analyzeUserIntent(message, history, detectedLanguage);
        let intent = llmAnalysis?.intent || null;
        let amenity = llmAnalysis?.amenity || null;
        let offerSupport = llmAnalysis?.offerSupport || false;
        let needHotelSelection = llmAnalysis?.needHotelSelection || false;
        let hotelFromLLM = llmAnalysis?.hotel || null;
        if (!hotel || hotel === 'Unknown') hotel = hotelFromLLM || hotel;
        // Eƒüer canlƒ± destek + otel adƒ± varyasyonu aktifse, needHotelSelection tekrar true olmasƒ±n
        if (offerSupport && hotel && otelAdlari.includes(hotel.toLowerCase())) {
            needHotelSelection = false;
        }

        // Support niyetini sadece bariz anahtar kelimelerle sƒ±nƒ±rla
        const supportKeywordsStrict = [
            'canlƒ± destek', 'ger√ßek bir insanla konu≈ümak istiyorum', 'operat√∂rle g√∂r√º≈ümek istiyorum',
            'i want live support', 'i want to talk to a real person', 'customer service', 'help', 'support',
            'ich m√∂chte mit einem menschen sprechen', 'live support', 'kundendienst', 'hilfe',
            '—è —Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å —á–µ–ª–æ–≤–µ–∫–æ–º', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–º–æ—â—å', '—Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
            'talk to human', 'talk to operator'
        ];
        const msgLower = message.toLowerCase();
        if (intent === 'support') {
            const found = supportKeywordsStrict.some(kw => msgLower.includes(kw));
            if (!found) {
                intent = 'info';
                offerSupport = false;
            }
        }

        // Canlƒ± destek deƒüilse, lokasyon analizi ve diƒüer i≈ülemler devam eder
        console.log('üîç Location analysis:', locationAnalysis);

        if (!locationAnalysis.isHotelAmenity && locationAnalysis.confidence > 0.6) {
            console.log('üìç External location query detected. Using enhanced location handling...');
            
            if (!userLocation || !userLocation.lat || !userLocation.lng) {
                return res.json({
                    success: true,
                    response: 'Konumunuzu bulmam i√ßin izin vermeniz gerekiyor. ƒ∞zni verdikten sonra tekrar deneyebilirsiniz.',
                    requiresLocation: true
                });
            }

            response = await geminiService.generateLocationResponse(
                message,
                locationAnalysis,
                userLocation,
                hotel,
                detectedLanguage
            );

            // Ensure placesData has the correct structure
            const sanitizedPlacesData = response.placesData ? {
                list: Array.isArray(response.placesData.list) ? response.placesData.list.map(place => ({
                    name: place.name || '',
                    distance: place.distance || 0,
                    lat: place.lat || 0,
                    lng: place.lng || 0,
                    rating: place.rating || 0,
                    vicinity: place.vicinity || '',
                    address: place.address || ''
                })) : [],
                searchQuery: response.placesData.searchQuery || '',
                searchLocation: {
                    lat: response.placesData.searchLocation?.lat || userLocation.lat,
                    lng: response.placesData.searchLocation?.lng || userLocation.lng,
                    address: response.placesData.searchLocation?.address || ''
                }
            } : null;

            // Log the response for analytics
            await firebaseService.logQuestionForAnalysis({
                message: response.response,
                session_id,
                hotel,
                language: detectedLanguage,
                isLocationResponse: true,
                locationData: sanitizedPlacesData?.list || []
            });

            return res.json({
                success: true,
                response: response.response,
                placesData: sanitizedPlacesData
            });
        }

        // Otel i√ßi olanak ve otel adƒ± yoksa, LLM flag'lerine g√∂re akƒ±≈ü
        if (amenity && (hotel === 'Unknown' || !hotel) && needHotelSelection) {
            // Eƒüer canlƒ± destek niyeti varsa butonlu akƒ±≈ü
            if (offerSupport) {
            return res.json({
                success: true,
                response: detectedLanguage === 'tr' ? 'Hangi Papillon Hotels otelinde konaklƒ±yorsunuz? Belvil, Zeugma ve Ayscha otellerimizden hangisinde olduƒüunuzu belirtirseniz, ' + amenity + ' hakkƒ±nda bilgi verebilirim.' :
                          detectedLanguage === 'en' ? 'Which Papillon Hotels property are you staying at? Please specify Belvil, Zeugma, or Ayscha so I can provide information about ' + amenity + '.' :
                          detectedLanguage === 'de' ? 'In welchem Papillon Hotels wohnen Sie? Bitte geben Sie Belvil, Zeugma oder Ayscha an, damit ich Ihnen Informationen zu ' + amenity + ' geben kann.' :
                          detectedLanguage === 'ru' ? '–í –∫–∞–∫–æ–º –æ—Ç–µ–ª–µ Papillon Hotels –≤—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Belvil, Zeugma –∏–ª–∏ Ayscha, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ ' + amenity + '.' :
                          'Which Papillon Hotels property are you staying at?',
                offerSupport: true,
                needHotelSelection: true
            });
            } else {
                // Sadece metinle otel sorusu d√∂n, buton flag'leri olmadan
                return res.json({
                    success: true,
                    response: detectedLanguage === 'tr' ? 'Hangi Papillon Hotels otelinde konaklƒ±yorsunuz? Belvil, Zeugma ve Ayscha otellerimizden hangisinde olduƒüunuzu belirtirseniz, ' + amenity + ' hakkƒ±nda bilgi verebilirim.' :
                              detectedLanguage === 'en' ? 'Which Papillon Hotels property are you staying at? Please specify Belvil, Zeugma, or Ayscha so I can provide information about ' + amenity + '.' :
                              detectedLanguage === 'de' ? 'In welchem Papillon Hotels wohnen Sie? Bitte geben Sie Belvil, Zeugma oder Ayscha an, damit ich Ihnen Informationen zu ' + amenity + ' geben kann.' :
                              detectedLanguage === 'ru' ? '–í –∫–∞–∫–æ–º –æ—Ç–µ–ª–µ Papillon Hotels –≤—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å? –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ Belvil, Zeugma –∏–ª–∏ Ayscha, —á—Ç–æ–±—ã —è –º–æ–≥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ ' + amenity + '.' :
                              'Which Papillon Hotels property are you staying at?'
                });
            }
        }

        // YENƒ∞: √áok dilli bilgi arama zinciri kullan
        console.log(`[Chat Route] Using multi-language knowledge search for: "${message}"`);
        
        let responseText;
        let geminiResponse = null;
        
        // Restoran sorusu ise √∂zel filtreleme yap
        if (detectedRestaurant) {
            console.log(`[Chat Route] Restaurant-specific question detected: ${detectedRestaurant}`);
            // Restoran sorusu i√ßin eski y√∂ntemi kullan (√ß√ºnk√º √∂zel filtreleme gerekiyor)
            const knowledge = await firebaseService.searchKnowledge(hotel, detectedLanguage);
            if (knowledge && detectedRestaurant) {
                const filteredChunks = Object.entries(knowledge.fbChunks || {})
                    .filter(([key]) => normalizeText(key).includes(normalizeText(detectedRestaurant)))
                    .map(([, chunks]) => chunks)
                    .flat();
                if (filteredChunks.length > 0) {
                    knowledge.content = filteredChunks.map(chunk => chunk.text).join('\n');
                }
            }
            geminiResponse = await geminiService.generateResponse(
                chatHistory,
                knowledge?.content || '',
                detectedLanguage,
                userLocation
            );
            responseText = geminiResponse.response;
        } else {
            // Genel sorular i√ßin yeni √ßok dilli arama zincirini kullan
            const knowledgeResult = await knowledgeService.findBestKnowledgeAnswer(message, hotel, detectedLanguage);
            
            if (knowledgeResult.success) {
                console.log(`[Chat Route] ‚úÖ Found answer in ${knowledgeResult.sourceLanguage}: "${knowledgeResult.answer.substring(0, 50)}..."`);
                responseText = knowledgeResult.answer;
            } else {
                console.log(`[Chat Route] ‚ùå No answer found, using fallback LLM response`);
                // Fallback: Eski y√∂ntemle LLM'ye g√∂nder
                const knowledge = await firebaseService.searchKnowledge(hotel, detectedLanguage);
                geminiResponse = await geminiService.generateResponse(
                    chatHistory,
                    knowledge?.content || '',
                    detectedLanguage,
                    userLocation
                );
                responseText = geminiResponse.response;
            }
        }
        if (responseText && responseText.includes('[DESTEK_TALEBI]')) {
            offerSupport = true;
            if (hotel === 'Unknown') {
                needHotelSelection = true;
            }
            if (detectedLanguage === 'tr') {
                responseText = needHotelSelection
                    ? "Hangi otelde konaklƒ±yorsunuz?"
                    : "Canlƒ± desteƒüe baƒülanmak istiyor musunuz?";
            } else if (detectedLanguage === 'en') {
                responseText = needHotelSelection
                    ? "Which hotel are you staying at?"
                    : "Do you want to connect to live support?";
            } else if (detectedLanguage === 'de') {
                responseText = needHotelSelection
                    ? "In welchem Hotel wohnen Sie?"
                    : "M√∂chten Sie mit dem Live-Support verbunden werden?";
            } else if (detectedLanguage === 'ru') {
                responseText = needHotelSelection
                    ? "–í –∫–∞–∫–æ–º –æ—Ç–µ–ª–µ –≤—ã –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å?"
                    : "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏?";
            } else {
                responseText = needHotelSelection
                    ? "Which hotel are you staying at?"
                    : "Do you want to connect to live support?";
            }
            return res.json({
                success: true,
                response: responseText,
                offerSupport,
                hotel: hotel !== 'Unknown' ? hotel : undefined,
                needHotelSelection
            });
        }

        // LLM'den d√∂nen cevabƒ± i≈üledikten hemen sonra:
        const spaCatalogOfferSentences = [
            'Eƒüer ilgilenirseniz, SPA kataloƒüumuzdan daha fazla detay verebilirim.',
            'If you are interested, I can provide more details from our SPA catalog.',
            'Wenn Sie interessiert sind, kann ich Ihnen weitere Details aus unserem SPA-Katalog geben.',
            '–ï—Å–ª–∏ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —è –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –Ω–∞—à–µ–≥–æ –°–ü–ê-–∫–∞—Ç–∞–ª–æ–≥–∞.'
        ];
        const spaKeywords = ['spa', 'wellness', 'masaj', 'massage', 'bakƒ±m', 'treatment'];
        if (responseText) {
            // Sadece amenity ve facility alanlarƒ±na bak
            const amenityOrFacility = ((amenity || '') + ' ' + (llmAnalysis?.facility || '')).toLowerCase();
            const isSpaContext = spaKeywords.some(kw => amenityOrFacility.includes(kw));
            spaCatalogOfferSentences.forEach(sentence => {
                if (!isSpaContext && responseText.includes(sentence)) {
                    responseText = responseText.replace(sentence, '').replace(/\s{2,}/g, ' ').trim();
                }
            });
        }

        return res.json({
            success: true,
            response: responseText,
            offerSupport,
            hotel: hotel !== 'Unknown' ? hotel : undefined,
            needHotelSelection
        });

    } catch (error) {
        console.error('‚ùå Chat endpoint error:', error);
        
        // Check if it's a Gemini API error
        if (error.message && error.message.includes('Gemini API')) {
            return res.status(503).json({
                success: false,
                error: 'AI service is temporarily unavailable. Please try again in a moment.',
                retryAfter: 30
            });
        }
        
        return res.status(500).json({
            success: false,
            error: 'An error occurred while processing your request. Please try again.',
            message: process.env.NODE_ENV === 'development' ? error.message : undefined
        });
    }
});

module.exports = router; 
