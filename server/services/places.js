const axios = require('axios');

class PlacesService {
    constructor() {
        this.apiKey = process.env.GOOGLE_CLOUD_API_KEY;
        this.baseUrl = 'https://maps.googleapis.com/maps/api/place';
        
        // Papillon Hotels coordinates (correct locations)
        this.hotelLocations = {
            'belvil': {
                name: 'Papillon Belvil Hotel',
                lat: 36.8626,
                lng: 31.0503,
                address: 'Belek, Antalya'
            },
            'zeugma': {
                name: 'Papillon Zeugma Hotel', 
                lat: 36.8626,
                lng: 31.0503,
                address: 'Belek, Antalya'
            },
            'ayscha': {
                name: 'Papillon Ayscha Hotel',
                lat: 36.4389,
                lng: 30.5961,
                address: 'Kemer, Antalya'
            }
        };
    }

    // Detect if user question is location-based (4 languages)
    isLocationQuery(message) {
        const lowerMessage = message.toLowerCase();
        
        // Travel/tourism specific phrases that are always location-based
        const travelPhrases = [
            // SPECIFIC PHRASES FIRST (to avoid partial matches)
            'how far is', 'show me cafes', 'show me restaurants', 'any points of interest',
            'wie weit ist', 'zeig mir caf√©s', 'gibt es interessante',
            '–∫–∞–∫ –¥–∞–ª–µ–∫–æ', '–∫–∞–∫–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ', '–ø–æ–∫–∞–∂–∏ –º–Ω–µ –∫–∞—Ñ–µ', '–µ—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ',
            // THEN GENERAL PHRASES
            // English
            'places to visit', 'best places', 'things to do', 'tourist attractions', 'sightseeing', 'visit in', 'explore in',
            'closest destination', 'nearest place', 'nearest attraction', 'distance from', 'how far', 'points of interest',
            'best destinations', 'local attractions', 'spots to explore', 'places worth visiting',
            // Turkish
            'gezilecek yerler', 'g√∂r√ºlecek yerler', 'yapƒ±lacak ≈üeyler', 'turist yerleri', 'gezi yerleri', 'en yakƒ±n yer',
            'mesafe ne kadar', 'ne kadar uzak', 'hangi mesafede', 'ilgi √ßekici yerler',
            // German
            'sehensw√ºrdigkeiten', 'touristenattraktionen', 'was zu besuchen', 'orte zu besuchen', 'interessante orte', 'beste orte', 
            'sehenswerte orte', 'n√§chste sehensw√ºrdigkeit', 'lokale attraktionen', 'orte zum erkunden', 'besuchenswerte orte',
            'n√§chstes ziel', 'interessante punkte',
            // Russian
            '–º–µ—Å—Ç–∞ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è', '—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞', '–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞', '–ª—É—á—à–∏–µ –º–µ—Å—Ç–∞',
            '–¥–æ—Å—Ç–æ–π–Ω—ã–µ –º–µ—Å—Ç–∞', '–±–ª–∏–∂–∞–π—à–∞—è –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–º–µ—Å—Ç–Ω—ã–µ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', '–º–µ—Å—Ç–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è', '—Å—Ç–æ—è—â–∏–µ –º–µ—Å—Ç–∞',
            '–±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Å—Ç–æ', '–∫–∞–∫ –¥–∞–ª–µ–∫–æ –¥–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–æ—á–∫–∏'
        ];

        // Check for travel phrases (always location-based)
        const hasTravelPhrase = travelPhrases.some(phrase => lowerMessage.includes(phrase));
        if (hasTravelPhrase) {
            console.log(`‚úàÔ∏è Backend: Travel phrase detected: "${message}" ‚Üí true`);
            return true;
        }
        
        // Location indicators - words that indicate looking for nearby places
        const locationIndicators = {
            'tr': ['yakƒ±n', 'yakƒ±nda', 'nerede', 'nasƒ±l gidilir', 'mesafe', 'en yakƒ±n', '√ßevredeki', '√ßevrede', 'bu b√∂lgedeki', 'b√∂lgede'],
            'en': ['near', 'nearby', 'where', 'how to get', 'distance', 'closest', 'nearest', 'show me', 'how far', 'close by', 'around here', 'around', 'within', 'accessible from', 'in the vicinity', 'vicinity', 'show'],
            'de': ['in der n√§he', 'wo', 'wie komme ich', 'entfernung', 'n√§chste', 'nah', 'zeig mir', 'zeigen', 'wie weit', 'in der n√§he von', 'hier in der umgebung', 'umgebung', 'innerhalb', 'erreichbar von', 'in der gegend', 'ganz nah'],
            'ru': ['—Ä—è–¥–æ–º', '–≥–¥–µ', '–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è', '—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ', '–±–ª–∏–∂–∞–π—à–∏–π', '–±–ª–∏–∑–∫–æ', '–ø–æ–∫–∞–∂–∏ –º–Ω–µ', '–ø–æ–∫–∞–∑–∞—Ç—å', '–∫–∞–∫ –¥–∞–ª–µ–∫–æ', '–ø–æ–±–ª–∏–∑–æ—Å—Ç–∏ –æ—Ç', '–∑–¥–µ—Å—å –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏', '–æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏', '–≤ –ø—Ä–µ–¥–µ–ª–∞—Ö', '–¥–æ—Å—Ç—É–ø–Ω–æ –æ—Ç', '–≤ —Ä–∞–π–æ–Ω–µ', '—Å–æ–≤—Å–µ–º –±–ª–∏–∑–∫–æ']
        };
        
        // Place types - what they might be looking for
        const placeTypes = {
            'tr': ['restoran', 'market', 'hastane', 'eczane', 'atm', 'banka', 'alƒ±≈üveri≈ü', 'mall', 'avm', 'cafe', 'bar', 'plaj', 'm√ºze', 'taksi', 'havaalanƒ±',
                   'yer', 'yerler', 'mekan', 'mekanlar', 'lokasyon', 'lokasyonlar', 'destinasyon', 'destinasyonlar', 'cazibe', 'cazibe yeri', 'kafeler', 'plajlar',
                   'lunapark', 'aquapark', 'eƒülence', 'eƒülence merkezi', 'tema parkƒ±', 'oyun parkƒ±', 'macera parkƒ±', 'su parkƒ±'],
            'en': ['restaurant', 'hospital', 'pharmacy', 'shopping', 'museum', 'supermarket', 'bank', 'cafe', 'bar', 'beach', 'taxi', 'airport',
                   'destination', 'destinations', 'place', 'places', 'location', 'locations', 'attraction', 'attractions', 'spot', 'spots', 'area', 'areas', 'interest', 'radius',
                   'amusement park', 'theme park', 'water park', 'entertainment', 'adventure park', 'fun park', 'arcade'],
            'de': ['restaurant', 'krankenhaus', 'apotheke', 'einkaufen', 'supermarkt', 'bank', 'cafe', 'bar', 'strand', 'taxi', 'flughafen', 'museum',
                   'ort', 'orte', 'standort', 'sehensw√ºrdigkeit', 'sehensw√ºrdigkeiten', 'attraktionen', 'ziel', 'ziele', 'lage', 'lagen', 'attraktion', 'interesse', 'radius', 'caf√©s', 'str√§nde',
                   'freizeitpark', 'themenpark', 'wasserpark', 'unterhaltung', 'abenteuerpark', 'vergn√ºgungspark'],
            'ru': ['—Ä–µ—Å—Ç–æ—Ä–∞–Ω', '–±–æ–ª—å–Ω–∏—Ü–∞', '–∞–ø—Ç–µ–∫–∞', '–º–∞–≥–∞–∑–∏–Ω', '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç', '–±–∞–Ω–∫', '–∫–∞—Ñ–µ', '–±–∞—Ä', '–ø–ª—è–∂', '—Ç–∞–∫—Å–∏', '–∞—ç—Ä–æ–ø–æ—Ä—Ç', '–º—É–∑–µ–π',
                   '–º–µ—Å—Ç–æ', '–º–µ—Å—Ç–∞', '–ª–æ–∫–∞—Ü–∏—è', '–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', '–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ', '–ø—É–Ω–∫—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è', '—Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ', '–∞—Ç—Ç—Ä–∞–∫—Ü–∏—è', '–∏–Ω—Ç–µ—Ä–µ—Å', '—Ä–∞–¥–∏—É—Å', '–ø–ª—è–∂–∏',
                   '–ø–∞—Ä–∫ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π', '—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∫', '–∞–∫–≤–∞–ø–∞—Ä–∫', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ø–∞—Ä–∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π']
        };
        
        // Hotel context questions (NOT location queries)
        const hotelQuestions = {
            'tr': ['hangi restoran', 'otel restoran', 'kahvaltƒ±', 'ak≈üam yemeƒüi', 'saat ka√ß', 'ne zaman', 'rezervasyon', 'tuvalet', 'wc', 'banyo', 'lavabo'],
            'en': ['which restaurant', 'hotel restaurant', 'breakfast', 'dinner', 'what time', 'when', 'reservation', 'restroom', 'bathroom', 'toilet', 'washroom'],
            'de': ['welches restaurant', 'hotel restaurant', 'fr√ºhst√ºck', 'abendessen', 'wann', 'reservierung', 'toilette', 'bad', 'waschraum'],
            'ru': ['–∫–∞–∫–æ–π —Ä–µ—Å—Ç–æ—Ä–∞–Ω', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω –æ—Ç–µ–ª—è', '–∑–∞–≤—Ç—Ä–∞–∫', '—É–∂–∏–Ω', '–≤–æ —Å–∫–æ–ª—å–∫–æ', '–∫–æ–≥–¥–∞', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '—Ç—É–∞–ª–µ—Ç', '–≤–∞–Ω–Ω–∞—è', '—É–±–æ—Ä–Ω–∞—è']
        };
        
        // Check if this is a hotel context question (NOT a location query)
        for (const questions of Object.values(hotelQuestions)) {
            if (questions.some(q => lowerMessage.includes(q))) {
                console.log(`üè® Backend: Hotel context question detected: "${message}" ‚Üí false`);
                return false;
            }
        }
        
        // Check for location indicators
        let hasLocationIndicator = false;
        for (const indicators of Object.values(locationIndicators)) {
            if (indicators.some(indicator => lowerMessage.includes(indicator))) {
                hasLocationIndicator = true;
                break;
            }
        }
        
        // Check for place types
        let hasPlaceType = false;
        for (const types of Object.values(placeTypes)) {
            if (types.some(type => lowerMessage.includes(type))) {
                hasPlaceType = true;
                break;
            }
        }
        
        // Location query = has both location indicator AND place type
        const isLocationQuery = hasLocationIndicator && hasPlaceType;
        
        console.log(`üîç Backend location query check: "${message}" ‚Üí ${isLocationQuery} (indicator: ${hasLocationIndicator}, place: ${hasPlaceType})`);
        return isLocationQuery;
    }

    // Get hotel coordinates based on context
    getHotelLocation(hotelName = null) {
        if (!hotelName) return this.hotelLocations['belvil']; // Default to Belvil
        
        const hotel = hotelName.toLowerCase();
        if (hotel.includes('zeugma')) return this.hotelLocations['zeugma'];
        if (hotel.includes('ayscha')) return this.hotelLocations['ayscha'];
        return this.hotelLocations['belvil'];
    }

    // Search nearby places
    async searchNearbyPlaces(query, hotelLocation, radius = 20000, language = 'tr') {
        try {
            const searchUrl = `${this.baseUrl}/nearbysearch/json`;
            
            // First try with specific type
            let params = {
                location: `${hotelLocation.lat},${hotelLocation.lng}`,
                radius: radius,
                type: query, // Use 'type' instead of 'keyword' for better results
                key: this.apiKey,
                language: language
            };

            console.log(`üåê Places API URL: ${searchUrl}`);
            console.log(`üìã Places API params (type search):`, params);

            let response = await axios.get(searchUrl, { params });
            console.log(`üìä Places API response status: ${response.data.status}`);
            
            if (response.data.status === 'OK' && response.data.results.length > 0) {
                const results = response.data.results.slice(0, 5);
                console.log(`‚úÖ Places API success: ${results.length} results found`);
                return results;
            }
            
            // If type search fails, try keyword search with broader term
            console.log(`üîÑ Retrying with keyword search...`);
            params = {
                location: `${hotelLocation.lat},${hotelLocation.lng}`,
                radius: radius,
                keyword: `${query} ${hotelLocation.address}`, // Include location in keyword
                key: this.apiKey,
                language: language
            };

            console.log(`üìã Places API params (keyword search):`, params);
            response = await axios.get(searchUrl, { params });
            console.log(`üìä Places API response status (retry): ${response.data.status}`);
            
            if (response.data.status === 'OK') {
                const results = response.data.results.slice(0, 5);
                console.log(`‚úÖ Places API success (retry): ${results.length} results found`);
                return results;
            } else {
                console.warn(`‚ö†Ô∏è Places API returned status: ${response.data.status}`);
                if (response.data.error_message) {
                    console.warn(`‚ö†Ô∏è Error message: ${response.data.error_message}`);
                }
                
                // Final fallback: search in nearest major city (Antalya)
                console.log(`üèôÔ∏è Final fallback: searching in Antalya city center...`);
                const antalyaParams = {
                    location: '36.8969,30.7133', // Antalya city center
                    radius: 50000, // 50km radius
                    type: query,
                    key: this.apiKey,
                    language: language
                };
                
                try {
                    const fallbackResponse = await axios.get(searchUrl, { params: antalyaParams });
                    if (fallbackResponse.data.status === 'OK' && fallbackResponse.data.results.length > 0) {
                        const results = fallbackResponse.data.results.slice(0, 3); // Fewer results for fallback
                        console.log(`‚úÖ Fallback search success: ${results.length} results found in Antalya`);
                        return results;
                    }
                } catch (fallbackError) {
                    console.error('‚ùå Fallback search failed:', fallbackError.message);
                }
                
                return [];
            }
        } catch (error) {
            console.error('‚ùå Places API error:', error.response?.data || error.message);
            return [];
        }
    }

    // Get place details
    async getPlaceDetails(placeId, language = 'tr') {
        try {
            const detailsUrl = `${this.baseUrl}/details/json`;
            
            const params = {
                place_id: placeId,
                fields: 'name,formatted_address,formatted_phone_number,opening_hours,rating,website',
                key: this.apiKey,
                language: language
            };

            const response = await axios.get(detailsUrl, { params });
            
            if (response.data.status === 'OK') {
                return response.data.result;
            }
            
            return null;
        } catch (error) {
            console.error('Place details error:', error);
            return null;
        }
    }

    // Format places data for AI context (multilingual)
    formatPlacesForAI(places, hotelLocation, language = 'tr') {
        const translations = {
            'tr': {
                noPlaces: 'Yakƒ±nda uygun yer bulunamadƒ±.',
                nearbyPlaces: 'yakƒ±nƒ±ndaki yerler:',
                address: 'Adres:',
                rating: 'Puan:',
                price: 'Fiyat:',
                status: 'Durum:',
                open: 'A√ßƒ±k',
                closed: 'Kapalƒ±'
            },
            'en': {
                noPlaces: 'No suitable places found nearby.',
                nearbyPlaces: 'nearby places:',
                address: 'Address:',
                rating: 'Rating:',
                price: 'Price:',
                status: 'Status:',
                open: 'Open',
                closed: 'Closed'
            },
            'de': {
                noPlaces: 'Keine geeigneten Orte in der N√§he gefunden.',
                nearbyPlaces: 'nahegelegene Orte:',
                address: 'Adresse:',
                rating: 'Bewertung:',
                price: 'Preis:',
                status: 'Status:',
                open: 'Ge√∂ffnet',
                closed: 'Geschlossen'
            },
            'ru': {
                noPlaces: '–ü–æ–±–ª–∏–∑–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç.',
                nearbyPlaces: '–º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏:',
                address: '–ê–¥—Ä–µ—Å:',
                rating: '–†–µ–π—Ç–∏–Ω–≥:',
                price: '–¶–µ–Ω–∞:',
                status: '–°—Ç–∞—Ç—É—Å:',
                open: '–û—Ç–∫—Ä—ã—Ç–æ',
                closed: '–ó–∞–∫—Ä—ã—Ç–æ'
            }
        };

        const t = translations[language] || translations['tr'];
        
        if (!places || places.length === 0) {
            return t.noPlaces;
        }

        let formattedText = `${hotelLocation.name} ${t.nearbyPlaces}\n\n`;
        
        places.forEach((place, index) => {
            formattedText += `${index + 1}. **${place.name}**\n`;
            formattedText += `   - ${t.address} ${place.vicinity}\n`;
            
            if (place.rating) {
                formattedText += `   - ${t.rating} ${place.rating}/5\n`;
            }
            
            if (place.price_level) {
                const priceSymbol = language === 'tr' ? '‚Ç∫' : '$';
                const priceText = priceSymbol.repeat(place.price_level);
                formattedText += `   - ${t.price} ${priceText}\n`;
            }
            
            if (place.opening_hours?.open_now !== undefined) {
                const statusText = place.opening_hours.open_now ? t.open : t.closed;
                formattedText += `   - ${t.status} ${statusText}\n`;
            }
            
            formattedText += '\n';
        });

        return formattedText;
    }

    // Main function to handle location queries
    async handleLocationQuery(userMessage, hotelContext = null, userLanguage = 'tr', userLocation = null) {
        try {
            // Determine search location: user location > hotel location
            let searchLocation;
            let locationContext;

            if (userLocation && userLocation.lat && userLocation.lng) {
                // Determine region name based on coordinates
                let regionName = 'Konumunuz';
                let regionAddress = 'Bulunduƒüunuz b√∂lge';
                
                // Check which region user is in (approximate)
                const userLat = userLocation.lat;
                const userLng = userLocation.lng;
                
                if (userLat >= 36.8 && userLat <= 36.9 && userLng >= 30.9 && userLng <= 31.1) {
                    regionName = 'Belek B√∂lgesi';
                    regionAddress = 'Belek, Antalya';
                } else if (userLat >= 36.4 && userLat <= 36.7 && userLng >= 30.5 && userLng <= 30.7) {
                    regionName = 'Kemer B√∂lgesi';
                    regionAddress = 'Kemer, Antalya';
                } else if (userLat >= 36.8 && userLat <= 37.0 && userLng >= 30.6 && userLng <= 30.8) {
                    regionName = 'Antalya Merkez';
                    regionAddress = 'Antalya Merkez';
                } else {
                    regionName = 'Antalya B√∂lgesi';
                    regionAddress = 'Antalya √ßevresi';
                }
                
                searchLocation = {
                    lat: userLocation.lat,
                    lng: userLocation.lng,
                    name: regionName,
                    address: regionAddress
                };
                locationContext = 'user';
                console.log(`üìç Using user location: ${regionName} (${searchLocation.lat}, ${searchLocation.lng})`);
            } else {
                searchLocation = this.getHotelLocation(hotelContext);
                locationContext = 'hotel';
                console.log(`üè® Using hotel location: ${searchLocation.name} (${searchLocation.lat}, ${searchLocation.lng})`);
            }
            
            // Extract search query from user message
            let searchQuery = this.extractSearchQuery(userMessage);
            console.log(`üîç Search query extracted: "${searchQuery}" from "${userMessage}"`);
            
            // Search nearby places (increased radius for better results)
            const places = await this.searchNearbyPlaces(searchQuery, searchLocation, 20000, userLanguage);
            console.log(`üìç Found ${places.length} places from Places API`);
            
            // Format for AI
            const formattedPlaces = this.formatPlacesForAI(places, searchLocation, userLanguage);
            
            return {
                hasResults: places.length > 0,
                placesData: formattedPlaces,
                hotelLocation: searchLocation,
                rawPlaces: places, // Include raw places data for map
                searchQuery: searchQuery,
                locationContext: locationContext // 'user' or 'hotel'
            };
            
        } catch (error) {
            console.error('Location query error:', error);
            
            // Error messages in different languages
            const errorMessages = {
                'tr': 'Konum bilgisi alƒ±nƒ±rken bir hata olu≈ütu.',
                'en': 'An error occurred while fetching location information.',
                'de': 'Beim Abrufen der Standortinformationen ist ein Fehler aufgetreten.',
                'ru': '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏.'
            };
            
            return {
                hasResults: false,
                placesData: errorMessages[userLanguage] || errorMessages['tr'],
                hotelLocation: null
            };
        }
    }

    // Extract search query from user message (4 languages)
    extractSearchQuery(message) {
        const lowerMessage = message.toLowerCase();
        
        // Multi-language place types mapping to Google Places API types
        const placeTypes = {
            // Turkish
            'restoran': 'restaurant',
            'market': 'supermarket',
            'hastane': 'hospital', 
            'eczane': 'pharmacy',
            'atm': 'atm',
            'banka': 'bank',
            'alƒ±≈üveri≈ü': 'shopping_mall',
            'avm': 'shopping_mall',
            'mall': 'shopping_mall',
            'cafe': 'cafe',
            'bar': 'bar',
            'plaj': 'beach',
            'm√ºze': 'museum',
            'tarihi': 'tourist_attraction',
            'taksi': 'taxi_stand',
            'havaalanƒ±': 'airport',
            'ara√ß kiralama': 'car_rental',
            // ENTERTAINMENT PLACES - Turkish
            'lunapark': 'amusement_park',
            'aquapark': 'water_park',
            'eƒülence': 'tourist_attraction',
            'eƒülence merkezi': 'amusement_park',
            'tema parkƒ±': 'amusement_park',
            'oyun parkƒ±': 'amusement_park',
            'macera parkƒ±': 'amusement_park',
            'su parkƒ±': 'water_park',
            
            // English
            'restaurant': 'restaurant',
            'supermarket': 'supermarket',
            'hospital': 'hospital',
            'pharmacy': 'pharmacy',
            'bank': 'bank',
            'shopping': 'shopping_mall',
            'mall': 'shopping_mall',
            'cafe': 'cafe',
            'bar': 'bar',
            'beach': 'beach',
            'museum': 'museum',
            'taxi': 'taxi_stand',
            'airport': 'airport',
            'rent a car': 'car_rental',
            'car rental': 'car_rental',
            // ENTERTAINMENT PLACES - English
            'amusement park': 'amusement_park',
            'theme park': 'amusement_park',
            'water park': 'water_park',
            'entertainment': 'tourist_attraction',
            'adventure park': 'amusement_park',
            'fun park': 'amusement_park',
            'arcade': 'amusement_park',
            
            // German
            'restaurant': 'restaurant',
            'krankenhaus': 'hospital',
            'apotheke': 'pharmacy',
            'supermarkt': 'supermarket',
            'bank': 'bank',
            'einkaufen': 'shopping_mall',
            'gesch√§ft': 'store',
            'cafe': 'cafe',
            'bar': 'bar',
            'strand': 'beach',
            'museum': 'museum',
            'taxi': 'taxi_stand',
            'flughafen': 'airport',
            'autovermietung': 'car_rental',
            // ENTERTAINMENT PLACES - German
            'freizeitpark': 'amusement_park',
            'themenpark': 'amusement_park',
            'wasserpark': 'water_park',
            'unterhaltung': 'tourist_attraction',
            'abenteuerpark': 'amusement_park',
            'vergn√ºgungspark': 'amusement_park',
            
            // Russian
            '—Ä–µ—Å—Ç–æ—Ä–∞–Ω': 'restaurant',
            '–±–æ–ª—å–Ω–∏—Ü–∞': 'hospital',
            '–∞–ø—Ç–µ–∫–∞': 'pharmacy',
            '—Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç': 'supermarket',
            '–º–∞–≥–∞–∑–∏–Ω': 'store',
            '–±–∞–Ω–∫': 'bank',
            '—Ç–æ—Ä–≥–æ–≤—ã–π —Ü–µ–Ω—Ç—Ä': 'shopping_mall',
            '–∫–∞—Ñ–µ': 'cafe',
            '–±–∞—Ä': 'bar',
            '–ø–ª—è–∂': 'beach',
            '–º—É–∑–µ–π': 'museum',
            '—Ç–∞–∫—Å–∏': 'taxi_stand',
            '–∞—ç—Ä–æ–ø–æ—Ä—Ç': 'airport',
            '–∞—Ä–µ–Ω–¥–∞ –∞–≤—Ç–æ': 'car_rental',
            // ENTERTAINMENT PLACES - Russian
            '–ø–∞—Ä–∫ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–π': 'amusement_park',
            '—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä–∫': 'amusement_park',
            '–∞–∫–≤–∞–ø–∞—Ä–∫': 'water_park',
            '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'tourist_attraction',
            '–ø–∞—Ä–∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–π': 'amusement_park'
        };
        
        // Find matching place type
        for (const [localTerm, googleType] of Object.entries(placeTypes)) {
            if (lowerMessage.includes(localTerm)) {
                return googleType;
            }
        }
        
        // If only hotel name mentioned, default to hospital (most common query)
        if (lowerMessage.includes('belvil') || lowerMessage.includes('zeugma') || lowerMessage.includes('ayscha')) {
            return 'hospital';
        }
        
        // If no specific type found, clean and return general search term
        return message
            .replace(/yakƒ±n|yakƒ±nda|nerede|nasƒ±l gidilir|mesafe/gi, '') // Turkish
            .replace(/near|nearby|where|how to get|distance/gi, '') // English
            .replace(/in der n√§he|wo|wie komme ich|entfernung/gi, '') // German
            .replace(/—Ä—è–¥–æ–º|–≥–¥–µ|–∫–∞–∫ –¥–æ–±—Ä–∞—Ç—å—Å—è|—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ/gi, '') // Russian
            .trim() || 'hospital'; // Default to hospital if empty
    }

    // Enhanced location query detection with AI fallback
    async isLocationQueryEnhanced(message, chatHistory = [], userLanguage = 'tr') {
        // First try fast keyword-based detection
        const keywordResult = this.isLocationQuery(message);
        
        // If keyword detection is confident (clear YES), use it
        if (keywordResult === true) {
            console.log(`‚ö° Fast keyword detection: "${message}" ‚Üí true`);
            return true;
        }
        
        // If keyword detection says NO but message seems borderline, use AI
        const lowerMessage = message.toLowerCase();
        const hasBorderlineKeywords = [
            // Borderline Turkish
            'nerede', 'ne kadar', 'nasƒ±l', 'hangi', 'var mƒ±',
            // Borderline English  
            'where', 'how far', 'any', 'which', 'are there',
            // Borderline German
            'wo', 'wie weit', 'gibt es', 'welche',
            // Borderline Russian
            '–≥–¥–µ', '–∫–∞–∫ –¥–∞–ª–µ–∫–æ', '–µ—Å—Ç—å –ª–∏', '–∫–∞–∫–∏–µ'
        ].some(keyword => lowerMessage.includes(keyword));
        
        if (hasBorderlineKeywords) {
            console.log(`ü§î Borderline query detected, using AI: "${message}"`);
            const geminiService = require('./gemini');
            const aiResult = await geminiService.detectLocationQuery(message, chatHistory, userLanguage);
            console.log(`üß† AI override result: "${message}" ‚Üí ${aiResult}`);
            return aiResult;
        }
        
        // Clear non-location query
        console.log(`‚ùå Clear non-location query: "${message}" ‚Üí false`);
        return false;
    }
}

module.exports = new PlacesService(); 